#Plain-text XOR Cipher-text = KEY
#Cipher-text is encoded in base-64
#Get key and make it all uppercase .upper()

#Take Cipher-text
#decode from base-64
#xor to Plain-text
#return key.upper()
#USE FREQUENCY instead of keywords
import base64
import string

#Xor two strings together
def xor_strings(s, t):
    """xor two strings together"""
    if isinstance(s, str):
        # Text strings contain single characters
        return "".join(chr(ord(a) ^ ord(b)) for a, b in zip(s, t))
    else:
        # Python 3 bytes objects contain integer values in the range 0-255
        return bytes([a ^ b for a, b in zip(s, t)])




decoded_base64 = base64.b64decode("MEZSOVdIR1ZFSTlGUElKSEJRRlBLT0xVV0FJO1dFVCdJRktKV0FGLDtFSVBXT0pMRkhXO0pGSFVWR0NFV0hFT0ZJSlVIV0VKUkY=")
decoded_message = "D.;J>;3> :\%%;#<;\".5;')'3 +X2+7U06?#8/-IB1!9$&98.-$^)3:<\">0-28-*4-+7+2+) ?"
#encoded_message = base64.b64encode(message)
key = xor_strings(decoded_base64, decoded_message).upper()
#print(key)

def readintofile(filename):
    with open(filename) as f:
        content = f.readlines()
# you may also want to remove whitespace characters like `\n` at the end of each line
    content = [x.strip() for x in content]
    return content

def xor_one_key_decoder(message):

    #keywords = readintofile("keywords.txt")


    keywords=['the', 'be', 'to', 'of', 'and',  'that', 'have', 'for',
    'not', 'with', 'he', 'as', 'you', 'do', 'at', 'this', 'but', 'his', 'by', 'from', 'they',
    'we', 'say', 'her', 'she', 'or', 'an', 'will', 'my', 'one', 'all', 'would', 'there', 'their',
    'what', 'so', 'up', 'out', 'if', 'about', 'who', 'get', 'which', 'go', 'me', 'when', 'make',
    'can', 'like', 'time', 'no', 'just', 'him', 'know', 'take', 'people', 'into', 'year', 'your',
    'good', 'some', 'could', 'them', 'see', 'other', 'than', 'then', 'now', 'look', 'only', 'come',
    'its', 'over', 'think', 'also', 'back', 'after', 'use', 'two', 'how', 'our', 'work', 'first',
    'well', 'way', 'even', 'new', 'want', 'because', 'any', 'these', 'give', 'day', 'most']



    theAlphabet ="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
    betterAlphabet = string.printable

    message_length = len(message)
    message_key = ""
    key = ""

    for i in range(len(theAlphabet)):
        key = theAlphabet[i]
        for j in range(message_length):
            message_key += key

        message2 = xor_strings(message, message_key)

        for word in keywords:
            word=" "+word+" "
            if word in message2 or word+" " in message2 or " "+word in message2 or " "+word+" " in message2:
                print(message2)

        message_key = ""


lines = readintofile("5_10ab6c2a0ce05c7c7bdfcf9e5b229adf.05.txt")

print("START")
for line in lines:
    xor_one_key_decoder(line)
